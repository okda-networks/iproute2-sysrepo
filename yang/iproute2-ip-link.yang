module iproute2-ip-link {
    yang-version 1.1;
    namespace "urn:okda:iproute2:ip:link";
    prefix "iplink";

    import iproute2-cmdgen-extensions { prefix ir2cgen; }
    //import ietf-inet-types { prefix inet; }
    //import ietf-yang-types { prefix yang; }
    organization
        "Okda Networks";

    contact
        "Author: Ali Aqrabawi
        <aaqrabaw@okdanetworks.com>";

    description

        "This module contain the iproute2 'ip link' configurations ,
        this is module contains all IP-LINK (8) related configs,
        refer to https://manpages.debian.org/unstable/iproute2/ip-link.8.en.html";

    revision "2024-02-13" {
        description "Revision 1";
        reference
            "YANG model for iproute2 ip link case.";
    }
    typedef link-ref {
        type leafref {
            path "/iplink:links/iplink:link/iplink:name";
        }
        description
            "This type is used by data models that need to reference
            interfaces.";
    }

    identity link-type {
        description
            "Base identity for ip link types.";
    }

    identity bond {
        base link-type;
        description
            "Bonding device.";
    }

    identity can {
        base link-type;
        description
            "Controller Area Network.";
    }

    identity dsa {
        base link-type;
        description
            "Distributed Switch Architecture.";
    }

    identity dummy {
        base link-type;
        description
            "Dummy network interface.";
    }

    identity gretap {
        base link-type;
        description
            "Virtual L2 tunnel interface GRE over IPv4.";
    }

    identity ifb {
        base link-type;
        description
            "Intermediate Functional Block device.";
    }

    identity ip6tnl {
        base link-type;
        description
            "Virtual tunnel interface IPv4|IPv6 over IPv6.";
    }

    identity ipvlan {
        base link-type;
        description
            "Interface for L3 (IPv6/IPv4) based VLANs.";
    }

    identity ipvtap {
        base link-type;
        description
            "Interface for L3 (IPv6/IPv4) based VLANs and TAP.";
    }

    identity lowpan {
        base link-type;
        description
            "Interface for 6LoWPAN (IPv6) over IEEE 802.15.4 / Bluetooth.";
    }

    identity netdevsim {
        base link-type;
        description
            "Interface for netdev API tests.";
    }

    identity nlmonipvtap {
        base link-type;
        description
            "Netlink monitoring device.";
    }

    identity vcan {
        base link-type;
        description
            "Virtual Controller Area Network interface.";
    }

    identity virt_wifi {
        base link-type;
        description
            "rtnetlink wifi simulation device.";
    }

    identity vti {
        base link-type;
        description
            "Virtual tunnel interface.";
    }


    container links {
        ir2cgen:cmd-add "ip link add";
        ir2cgen:cmd-update "ip link set";
        ir2cgen:cmd-delete "ip link delete";
        description "ip-link - network device configuration";
        list link {
            ir2cgen:cmd-start;
            key "name";
            description "ip-link - network device";
            leaf name {
                ir2cgen:value-only-on-update;
                type string;
                description "link name";
            }
            leaf device {
                type string;
                description "specifies the physical device to act operate on";
            }
            leaf type {
                type identityref {
                    base link-type;
                }
                description "specifies the type of the device";
            }

            leaf mtu {
                type uint16{
                    range "64..9000";
                }
                description "specifies the mtu size for the device";
            }

            leaf numtxqueues {
                type uint32;
                description "specifies the number of transmit queues for device.";
            }
            leaf numrxqueues {
                type uint32;
                description "specifies the number of receive queues for device.";
            }
            leaf gso_max_size {
                type uint32;
                description "BYTES: specifies the recommended maximum size of a Generic Segment Offload packet
                the new device should accept. This is also used to enable BIG TCP for IPv6 on
                this device when the size is greater than 65536.";
            }
            leaf gso_ipv4_max_size {
                type uint32;
                description "BYTES: specifies the recommended maximum size of a IPv4 Generic Segment Offload
                packet the new device should accept. This is especially used to enable BIG TCP for
                IPv4 on this device by setting to a size greater than 65536.";
            }
            leaf gso_max_segs {
                type uint32;
                description "specifies the recommended maximum number of a Generic Segment
                Offload segments the device should accept.";
            }
            leaf gro_max_size {
                type uint32;
                description "specifies the maximum size of a packet built by GRO stack on this device.
                This is also used for BIG TCP to allow the size of a merged IPv6 GSO
                packet on this device greater than 65536.";
            }
            leaf gro_ipv4_max_size {
                type uint32;
                description "specifies the maximum size of a IPv4 packet built by GRO stack on this device.
                This is especially used for BIG TCP to allow the size of a merged IPv4 GSO packet on
                this device greater than 65536.";
            }
            leaf admin-status{
                description "set admin status for the link";
                type enumeration {
                    enum "up";
                    enum "down";
                }
            }
            leaf index {
                type uint64;
                description "specifies the desired index of the new virtual device.
                The link creation fails, if the index is busy.";
            }
            choice netns {
                description "create the device in the network namespace associated with process
                PID or the name NETNSNAME or the file NETNSFILE.";
                case process-id {
                    description "create the device in the network namespace associated with process";
                    leaf pid {
                        type uint64;
                        description "process id";
                    }
                }
                case name {
                    description "create the device in the network namespace associated with name NETNSNAME";
                    leaf netnsname {
                        type string;
                        description "network namespace name";
                    }
                }
                case file {
                    description "create the device in the network namespace associated with file NETNSFILE";
                    leaf netnsfile {
                        type string;
                        description "network namespace file";
                    }
                }
            }

        }
    }

}